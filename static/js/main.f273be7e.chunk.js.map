{"version":3,"sources":["components/Addform.js","components/TaskItem.js","components/Tasklist.js","components/Sort.js","components/Search.js","components/Control.js","App.js","serviceWorker.js","index.js"],"names":["Addform","props","onChange","e","state","date","time","Date","toLocaleDateString","toLocaleTimeString","target","name","value","setState","onSubmit","preventDefault","onClear","onCloseForm","status","id","this","taskEditting","nextProps","className","onClick","type","React","Component","TaskItem","onUpdateStatus","task","onDelete","onEdit","index","Badge","color","Tasklist","onFilter","filterName","filterStatus","tasks","elmtask","map","key","Sort","sortBy","sortValue","onSort","console","log","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","Search","onSearch","keyword","placeholder","Control","App","toggleForm","isdisplayedForm","onShowForm","data","findIndex","uuid","push","localStorage","setItem","JSON","stringify","result","forEach","splice","parseInt","filter","toLowerCase","onDeleteAll","clear","getItem","parse","indexOf","sort","a","b","elmTaskForm","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f273be7e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport default class Addform extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: '',\r\n      name: '',\r\n      date: '',\r\n      time: '',\r\n      status: false\r\n    }\r\n  }\r\n  onChange = (e) => {\r\n    var {date, time} = this.state\r\n    date = new Date().toLocaleDateString(); \r\n    time = new Date().toLocaleTimeString(); \r\n    var target = e.target;\r\n    var name = target.name;\r\n    var value = target.value;\r\n    this.setState({\r\n      [name] : value,\r\n      date: date,\r\n      time: time\r\n    })\r\n  }\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state)\r\n    this.onClear();\r\n  }\r\n  onCloseForm = () => {\r\n    this.props.onCloseForm();\r\n  }\r\n  onClear = ( )=> {\r\n    this.setState({\r\n      name: '',\r\n      status: false\r\n    })\r\n  }\r\n  componentDidMount(){\r\n    if(this.props.taskEditting){\r\n      this.setState({\r\n        id: this.props.taskEditting.id,\r\n        name: this.props.taskEditting.name,\r\n        date: new Date().toLocaleDateString(),\r\n        time: new Date().toLocaleTimeString(),\r\n        status: this.props.taskEditting.status\r\n      })\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n    if(nextProps && nextProps.taskEditting){\r\n      this.setState({\r\n        id: nextProps.taskEditting.id,\r\n        name: nextProps.taskEditting.name,\r\n        date: nextProps.taskEditting.date,\r\n        time: nextProps.taskEditting.time,\r\n        status: nextProps.taskEditting.status\r\n      })\r\n    }\r\n    if(!nextProps.taskEditting) {\r\n      this.setState({\r\n        id: '',\r\n        name: '',\r\n        status: false\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    var {id} = this.state;\r\n    return (\r\n      <div className = \"panel panel-warning\">\r\n        <div className = \"panel-heading\">\r\n          <h3 className = \"panel-title\">\r\n            {id !== '' ? \"Edit Work\": \"Add Work\"}\r\n            <span className = \"fa fa-times-circle ml-10\" onClick = {this.onCloseForm}></span>\r\n          </h3>\r\n        </div>\r\n        <div className = \"panel-body\">\r\n          <form onSubmit = {this.onSubmit}>\r\n            <div className = \"form-group\">\r\n              <label>Name:</label>\r\n              <input type = \"text\" className = \"form-control\" name = \"name\" value = {this.state.name} onChange = {this.onChange}/>\r\n            </div>\r\n            <label>Status:</label>\r\n            <select className = \"form-control\" name = \"status\" value = {this.state.status} onChange = {this.onChange}>\r\n              <option value = {true}>Activate </option>\r\n              <option value = {false}>Hidden </option>\r\n            </select><br/>\r\n            <div className = \"text-center\">\r\n              <button type = \"submit\" className = \"btn btn-warning\"> Add </button> \r\n              &nbsp;\r\n              <button type = \"button\" className = \"btn btn-danger\" onClick ={this.onClear}> Reset </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport { Badge } from 'reactstrap';\r\nexport default class TaskItem extends Component {\r\n    onUpdateStatus = () =>{\r\n        this.props.onUpdateStatus(this.props.task.id)\r\n    }\r\n    onDelete = () => {\r\n        this.props.onDelete(this.props.task.id)\r\n    }\r\n    onEdit = () => {\r\n        this.props.onEdit(this.props.task.id)\r\n    }\r\n    render() {\r\n        var {task, index} = this.props\r\n        return (\r\n            <tr>\r\n                <td className=\"text-center\">{index+1}</td>\r\n                <td>{task.name}</td>\r\n                <td className =\"text-center\">\r\n                    <Badge color ={task.status ? \"danger\":  \"primary\"} onClick = {this.onUpdateStatus}>{task.status ? \"Activated\": \"Hidden\"}</Badge>\r\n                </td>\r\n                <td className =\"text-center\"> {task.time}<br/>{task.date}</td>\r\n                <td className = \"text-center\">\r\n                    <button type = \"button\" className = \"btn btn-warning \" onClick ={this.onEdit}> <span className = \"fa fa-pencil mr-2\"></span>Edit</button>\r\n                    &nbsp;\r\n                    <button type = \"button\" className = \"btn btn-danger \" onClick ={this.onDelete}> <span className = \"fa fa-trash mr-2\"></span>Delete</button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TaskItem from './TaskItem'\r\n\r\nexport default class Tasklist extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            filterName: '',\r\n            filterStatus: -1\r\n        }\r\n    }\r\n    onChange = (e)=> {\r\n        \r\n        var target = e.target;\r\n        var name = target.name\r\n        var value = target.value\r\n        this.props.onFilter(\r\n            name === 'filterName' ? value: this.state.filterName,\r\n            name === 'filterStatus' ? value: this.state.filterStatus\r\n        )\r\n        this.setState({\r\n            [name] : value \r\n        })\r\n    }\r\n    render() {\r\n        var {tasks} = this.props\r\n        var {filterName, filterStatus} = this.state\r\n        var elmtask = tasks.map((task, index)=> {\r\n            return <TaskItem key ={task.id} index = {index} task = {task} onUpdateStatus = {this.props.onUpdateStatus} onDelete = {this.props.onDelete} onEdit = {this.props.onEdit}/>\r\n        })\r\n        return (\r\n            <div>\r\n                <table className = \"table table-bodered table-hover mt-15\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className = \"text-center\"> STT</th>\r\n                            <th className = \"text-center\"> Name</th>\r\n                            <th className = \"text-center\"> Status</th>\r\n                            <th className = \"text-center\"> Time</th>\r\n                            <th className = \"text-center\"> Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody >\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>\r\n                                <input type=\"text\" className = \"form-control\" name = \"filterName\" value = {filterName} onChange = {this.onChange}/>\r\n                            </td>\r\n                            <td>\r\n                                <select className = \"form-control\" name =\"filterStatus\" value = {filterStatus} onChange = {this.onChange}> \r\n                                <option value = {-1}>All</option>\r\n                                <option value = {0}>Hidden</option>\r\n                                <option value = {1}>Activated</option></select>\r\n                            </td>\r\n                            <td></td>\r\n                        </tr>\r\n                        {elmtask}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.css'\r\nexport default class Sort extends Component {\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(nextProps.sortBy, nextProps.sortValue)\r\n    }\r\n    onClick = (sortBy, sortValue) => {\r\n        this.props.onSort(sortBy, sortValue)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className = \"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"dropdown\">\r\n                <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    Sort\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby = \"dropdownMenu1\">\r\n                    <button className={(this.props.sortBy === 'default' && this.props.sortValue === 1) ? \"dropdown-item sort-selected\": \"dropdown-item\"} onClick ={()=> this.onClick('default', 1)}>\r\n                        Default</button>\r\n                    <button className={(this.props.sortBy === 'name' && this.props.sortValue === 1) ? \"dropdown-item sort-selected\": \"dropdown-item\"} onClick ={()=> this.onClick('name', 1)}>\r\n                        <span className = \"fa fa-sort-alpha-asc\"></span> Name A-Z</button>\r\n                    <button className={(this.props.sortBy === 'name' && this.props.sortValue === -1) ? \"dropdown-item sort-selected\": \"dropdown-item\"} onClick ={()=> this.onClick('name', -1)}>\r\n                        <span className = \"fa fa-sort-alpha-desc\"></span> Name Z-A</button>\r\n                    <div className=\"dropdown-divider\"></div>\r\n                    <button className={(this.props.sortBy === 'status' && this.props.sortValue === 1) ? \"dropdown-item sort-selected\": \"dropdown-item\"} onClick ={()=> this.onClick('status', 1)}>Activated</button>\r\n                    <button className={(this.props.sortBy === 'status' && this.props.sortValue === -1) ? \"dropdown-item sort-selected\": \"dropdown-item\"} onClick ={()=> this.onClick('status', -1)}>Hidden</button>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Search extends Component {\r\n    constructor(props){\r\n        super(props)    \r\n        this.state = {\r\n            keyword: ''\r\n        }\r\n    }\r\n    onChange=(e)=> {\r\n        var target = e.target\r\n        var name = target.name\r\n        var value = target.value\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword)\r\n    }\r\n    onClear = () => {\r\n        this.setState({\r\n            keyword: ''\r\n        })\r\n        this.props.onClear()\r\n    }\r\n    render() {\r\n        var {keyword} = this.state;\r\n        return (\r\n            <div className = \"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className = \"input-group\">\r\n                    <input name= \"keyword\" type = \"text\" className =\"form-control mr-2\" placeholder = \"Input Keyword\" value = {keyword} onChange = {this.onChange}/>\r\n                    <span className = \"input-group-btn\" >\r\n                        <button className = \"btn btn-primary mr-2\" type = \"button\" onClick = {this.onSearch}>\r\n                            <span className = \"fa fa-search mr-2\"></span>\r\n                            Search\r\n                        </button>\r\n                        <button className = \"btn btn-danger\" type =\"button\" onClick = {this.onClear}>Clear</button>\r\n                    </span>\r\n                </div>\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Sort from './Sort'\r\nimport Search from './Search'\r\nimport './index.css'\r\nexport default class Control extends Component {\r\n    render() {\r\n        return (\r\n            <div className = \"row\">\r\n            <Search onSearch ={this.props.onSearch} onClear = {this.props.onClear}/>\r\n            <Sort onSort = {this.props.onSort} sortBy = {this.props.sortBy} sortValue = {this.props.sortValue}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport {v1 as uuid} from \"uuid\";\r\nimport Addform from './components/Addform';\r\nimport Tasklist from './components/Tasklist'\r\nimport Control from './components/Control'\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      tasks: [],\r\n      isdisplayedForm: false,\r\n      taskEditting: '',\r\n      filter: {\r\n        name: '',\r\n        status: -1\r\n      },\r\n      keyword: '',\r\n      sortBy: 'default',\r\n      sortValue: 1,\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    if (localStorage && localStorage.getItem('tasks')){\r\n      var tasks =  JSON.parse(localStorage.getItem('tasks'))\r\n      this.setState({\r\n        tasks: tasks\r\n      })\r\n    }\r\n  }\r\n\r\n  toggleForm = () => {\r\n    if(this.state.isdisplayedForm && this.state.taskEditting !== '') {\r\n      this.setState({\r\n        isdisplayedForm: true,\r\n        taskEditting:''\r\n      })\r\n    } else {\r\n      this.setState({\r\n        isdisplayedForm: !this.state.isdisplayedForm,\r\n        taskEditting: ''\r\n      })\r\n    }\r\n  }\r\n\r\n  onCloseForm = () => {\r\n    this.setState({\r\n      isdisplayedForm: false\r\n    })\r\n  }\r\n\r\n  onShowForm = () => {\r\n    this.setState({\r\n      isdisplayedForm: true\r\n    })\r\n  }\r\n\r\n  onSubmit = (data) => {\r\n    console.log(data.date, data.time)\r\n    var {tasks} = this.state;\r\n    if (data.id !== '') {\r\n      if(data.status === \"true\"){\r\n        data.status = true\r\n      }\r\n      else {\r\n        data.status = false\r\n      }\r\n      var index = this.findIndex(data.id)\r\n      tasks[index] = data\r\n      this.onCloseForm()\r\n    }\r\n    else {\r\n      data.id = uuid();\r\n      tasks.push(data)\r\n    }\r\n    this.setState({\r\n      tasks: tasks,\r\n      taskEditting: ''\r\n    })\r\n    localStorage.setItem('tasks', JSON.stringify(tasks))\r\n  }\r\n  onUpdateStatus = (id)=>{\r\n    var {tasks} = this.state\r\n    var index = this.findIndex(id)\r\n    if (index !== -1) {\r\n      tasks[index].status = !tasks[index].status\r\n      this.setState({\r\n        tasks: tasks\r\n      })\r\n    }\r\n    localStorage.setItem('tasks', JSON.stringify(tasks))\r\n    \r\n  }\r\n  findIndex= (id)=> {\r\n    var {tasks} = this.state\r\n    var result = -1;\r\n    tasks.forEach((task, index) => {\r\n      if(task.id === id) {\r\n        result = index;\r\n      }\r\n    })\r\n    return result\r\n  }\r\n  onDelete = (id)=> {\r\n    var {tasks} = this.state\r\n    var index = this.findIndex(id)\r\n    if (index !== -1) {\r\n      tasks.splice(index, 1)\r\n      this.setState({\r\n        tasks: tasks\r\n      })\r\n    }\r\n    localStorage.setItem('tasks', JSON.stringify(tasks))\r\n    this.onCloseForm()\r\n  }\r\n  onEdit = (id)=> {\r\n    var {tasks} = this.state\r\n    var index = this.findIndex(id)\r\n    var taskEditting = tasks[index];\r\n    this.setState({\r\n      taskEditting: taskEditting\r\n    })\r\n    this.onShowForm();\r\n  }\r\n  onFilter = (filterName, filterStatus) => {\r\n    filterStatus = parseInt(filterStatus, 10)\r\n    this.setState({\r\n      filter: {\r\n        name: filterName.toLowerCase(),\r\n        status: filterStatus\r\n      }\r\n    })\r\n  }\r\n  onSearch = (keyword) => {\r\n    this.setState({\r\n      keyword: keyword\r\n    })\r\n  }\r\n  onClear = () => {\r\n    this.setState({\r\n      keyword: ''\r\n    })\r\n  }\r\n  onSort = (sortBy, sortValue) => {\r\n    this.setState({\r\n      sortBy: sortBy,\r\n      sortValue: sortValue\r\n    })\r\n  }\r\n  onDeleteAll = () => {\r\n    var {tasks} = this.state\r\n    tasks = []\r\n    this.setState({\r\n      tasks: tasks\r\n    })\r\n    console.log(tasks)\r\n    localStorage.clear()\r\n  }\r\n  render() {\r\n    var {tasks, isdisplayedForm, taskEditting, filter, keyword, sortBy, sortValue} = this.state\r\n    console.log(tasks)\r\n    if(filter){\r\n      if(filter.name){\r\n        tasks = tasks.filter(task=>task.name.toLowerCase().indexOf(filter.name) !== -1)\r\n      }\r\n      tasks = tasks.filter(task => {\r\n        if(filter.status === -1){\r\n          return task\r\n        }\r\n        else {\r\n          return task.status === (filter.status === 1 ? true: false)\r\n        }\r\n      })\r\n    }\r\n    if(sortBy === 'name') {\r\n      tasks.sort((a, b)=> {\r\n        if(a.name.toLowerCase() > b.name.toLowerCase()) return sortValue\r\n        else if (a.name.toLowerCase()< b.name.toLowerCase()) return -sortValue\r\n        else return 0\r\n      })\r\n    }\r\n    else if(sortBy === 'status') {\r\n      tasks.sort((a, b)=> {\r\n        if(a.status > b.status) return -sortValue\r\n        else if (a.status< b.status) return sortValue\r\n        else return 0\r\n      })\r\n    }\r\n    \r\n    if(keyword) {\r\n      tasks = tasks.filter(task=>task.name.toLowerCase().indexOf(keyword) !== -1)\r\n    }\r\n    var elmTaskForm = isdisplayedForm ? <Addform taskEditting = {taskEditting} onSubmit = {this.onSubmit} onCloseForm = {this.onCloseForm}/>: '';\r\n    return (    \r\n      <div className=\"container\">\r\n        <div className = \"text-center text-capitalize mt-2 mb-2\"> <h1>to do list</h1></div>\r\n        <div className =\"row\">\r\n          <div className = {isdisplayedForm ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\": ''}>\r\n            {elmTaskForm}\r\n          </div>\r\n          <div className = {isdisplayedForm ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\r\n            <button type =\"button\" className = \"btn btn-primary text-capitalize mr-2\" onClick = {this.toggleForm}><span className = \"fa fa-plus mr-2\"> </span>add work</button>\r\n            <Control onSearch = {this.onSearch} onClear = {this.onClear} onSort = {this.onSort} sortBy = {sortBy} sortValue = {sortValue}/>\r\n            <Tasklist tasks = {tasks} onUpdateStatus = {this.onUpdateStatus} onDelete = {this.onDelete} onEdit = {this.onEdit} onFilter = {this.onFilter}/>\r\n          </div> \r\n        </div>\r\n        {tasks.length !== 0 ? <div className=\"row justify-content-center\">\r\n            <div className=\"col-3 text-center\">\r\n              <button type =\"button\" className = \"btn btn-danger btn-lg text-capitalize mr-2\" onClick = {this.onDeleteAll}>\r\n                <span className = \"fa fa-trash mr-2\"> </span>\r\n                DELETE ALL</button>\r\n            </div>\r\n        </div>: ''}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}